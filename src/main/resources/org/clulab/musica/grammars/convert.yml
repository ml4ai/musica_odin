
vars: org/clulab/musica/grammars/triggers.yml


rules:

  #CONVERT NOTE TO X
  - name: convert-note-1
    label: ${label}
    priority: ${rulepriority}
    example: "Convert the quarter note in measure 1 into a quarter rest"
    type: token
    pattern: |
      ([]? @onset:Onset [tag=/,/]?)?
      (?<trigger>[word=/(?i)^(${convert_triggers})/]) @note:Note (@locationrel:LocationRel []?
      (@note:Note|@rest:Rest|@chord:Chord))? ([]? @onset:Onset)? (into|to)
      (@rest:Rest|@chord:Chord|@pitchsequence:PitchSequence) ([]? @onset:Onset)?

  - name: convert-note-2-conjunction
    label: ${label}
    priority: ${rulepriority}
    example: "convert the G in measure 1 to an augmented second and the F into a rest"
    type: token
    pattern: |
      (?<trigger>[word=/(?i)^(${convert_triggers})/]) []{2,10} and @note:Note (to|into)
      (@rest:Rest|@chord:Chord|@pitchsequence:PitchSequence) []? @onset:Onset?

  - name: convert-note-3-passive
    label: ${label}
    priority: ${rulepriority}
    example: "the G in measure 1 should be converted into a quarter rest"
    type: token
    pattern: |
      ([]? @onset:Onset)? [tag=/,/]? @note:Note ([]? @onset:Onset)? should? [word=/^(${aux_be})/]
      (?<trigger>[word=/(?i)^(${convert_triggers})/])
      (to|into) (@rest:Rest|@chord:Chord|@pitchsequence:PitchSequence) ([]? @onset:Onset)?

  # CONVERT REST TO X
  - name: convert-rest-1
    label: ${label}
    priority: ${rulepriority}
    example: "Convert the quarter note in measure 1 into a quarter rest"
    type: token
    pattern: |
      (?<trigger>[word=/(?i)^(${convert_triggers})/]) @rest:Rest
      (@locationrel:LocationRel []? (@note:Note|@rest:Rest|@chord:Chord))?
      ([]? @onset:Onset)? (into|to) (@note:Note|@chord:Chord|@pitchsequence:PitchSequence)

  - name: convert-rest-2-conjunction
    label: ${label}
    priority: ${rulepriority}
    example: "convert the G in measure 1 to an augmented second and the F into a rest"
    type: token
    pattern: |
      (?<trigger>[word=/(?i)^(${convert_triggers})/]) []{2,10} and
      (@note:Note|@rest:Rest|@chord:Chord|@pitchsequence:PitchSequence) (to|into)
      (@note:Note|@rest:Rest|@chord:Chord|@pitchsequence:PitchSequence) []? @onset:Onset?

  - name: convert-rest-3-passive
    label: ${label}
    priority: ${rulepriority}
    example: "the G in measure 1 should be converted into a quarter rest"
    type: token
    pattern: |
      ([]? @onset:Onset)? @rest:Rest
      ([]? @onset:Onset)? should? [word=/^(${aux_be})/] (?<trigger>[word=/(?i)^(${convert_triggers})/])
      (to|into) (@note:Note|@chord:Chord|@pitchsequence:PitchSequence) ([]? @onset:Onset)?

  # CONVERT CHORD TO REST
  # todo: Determine if changing from one chord type to another is a 'convert' event
  # currently written as though it is
  - name: convert-chord-1
    label: ${label}
    priority: ${rulepriority}
    example: "Convert the quarter note in measure 1 into a quarter rest"
    type: token
    pattern: |
      (?<trigger>[word=/(?i)^(${convert_triggers})/]) @chord:Chord
      (@locationrel:LocationRel []? (@note:Note|@rest:Rest|@chord:Chord|@pitchsequence:PitchSequence))?
      ([]? @onset:Onset)? (into|to) (@note:Note|@rest:Rest|@chord:Chord|@pitchsequence:PitchSequence)

  - name: convert-chord-2-conjunction
    label: ${label}
    priority: ${rulepriority}
    example: "convert the G in measure 1 to an augmented second and the F into a rest"
    type: token
    pattern: |
      (?<trigger>[word=/(?i)^(${convert_triggers})/]) []{2,10} and @chord:Chord (to|into)
      (@note:Note|@rest:Rest|@chord:Chord|@pitchsequence:PitchSequence) []? @onset:Onset?

  - name: convert-chord-3-passive
    label: ${label}
    priority: ${rulepriority}
    example: "the G in measure 1 should be converted into a quarter rest"
    type: token
    pattern: |
      ([]? @onset:Onset)? @chord:Chord ([]? @onset:Onset)? should? [word=/^(${aux_be})/]
      (?<trigger>[word=/(?i)^(${convert_triggers})/]) (to|into)
      (@note:Note|@rest:Rest|@chord:Chord|@pitchsequence:PitchSequence) ([]? @onset:Onset)?